/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CLang.jj.jj */
/*@egen*/PARSER_BEGIN(CLang)
public class CLang/*@bgen(jjtree)*/implements CLangTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCLangState jjtree = new JJTCLangState();

/*@egen*/
    
}
PARSER_END(CLang)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {
    <TYPE: <INT> | <CHAR> | <VOID> >     |
    <WHILE:  "while"  >                  |
    <RETURN: "return"  >                 |
    <FOR:    "for"  >                    |
    <IF:     "if"  >                     |
    <#INT:   "int" >                     |
    <#CHAR:  "char" >                    |
    <#VOID:  "void" >                    
}

TOKEN: {
    <LRBRACKET: "(" > |
    <RRBRACKET: ")" > |
    <COMMA:     "," > |
    <LCBRACKET: "{" > |
    <RCBRACKET: "}" > |
    <SEMICOLON: ";" > |
    <ASSIGN:    "=" > |
    <APSOTREPHE:"'" > |
    <EQ:       "==" > |
    <LT:       "<"  > |
    <LTE:      "<=" > |
    <GT:       ">"  > |
    <GTE:      ">=" > |
    <NOT:      "!"  > |
    <NEQ:      "!=" > |
    <AND:      "&&" > |
    <OR:       "||" > |
    <ADD:       "+" > |
    <SUB:       "-" > |
    <MUL:       "*" > |
    <DIV:       "/" > |
    <MOD:       "%" >  
}
   
TOKEN: {
    <  ID:<LETTER> (<LETTER> | <DIGIT> | <ZERO>)*>     |
    <NUMBER: <DIGIT> (<DIGIT> | <ZERO>)* | <ZERO> >                 |
    <CHAR_VALUE: <APSOTREPHE> (<LETTER> | <DIGIT>) <APSOTREPHE> >   | 
    <#LETTER: ["a"-"z","A"-"Z"] >                                   |
    <#DIGIT: ["1"-"9"] >                                            |
    <#ZERO: "0" >
}

void idExpressionDef() : {/*@bgen(jjtree) idExpressionDef */
  ASTidExpressionDef jjtn000 = new ASTidExpressionDef(JJTIDEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) idExpressionDef */
    try {
/*@egen*/
    <LRBRACKET>idExpressionDef()<RRBRACKET>
    | <ID>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/             
}

void constExpressionDef() : {/*@bgen(jjtree) constExpressionDef */
  ASTconstExpressionDef jjtn000 = new ASTconstExpressionDef(JJTCONSTEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) constExpressionDef */
    try {
/*@egen*/
    <ID>                                        |
    <NUMBER>                                    |
    <CHAR_VALUE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                
}

void listExpressionDef()   : {/*@bgen(jjtree) listExpressionDef */
  ASTlistExpressionDef jjtn000 = new ASTlistExpressionDef(JJTLISTEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) listExpressionDef */
    try {
/*@egen*/
    expressionDef() (<COMMA> expressionDef())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void functionCall()   : {/*@bgen(jjtree) functionCall */
  ASTfunctionCall jjtn000 = new ASTfunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) functionCall */
    try {
/*@egen*/
    idExpressionDef()<LRBRACKET>[listExpressionDef() ]<RRBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void unaryExpressionDef() : {/*@bgen(jjtree) unaryExpressionDef */
  ASTunaryExpressionDef jjtn000 = new ASTunaryExpressionDef(JJTUNARYEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unaryExpressionDef */
    try {
/*@egen*/                     
    LOOKAHEAD(functionCall() )functionCall()        |
    constExpressionDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void mulExpressionDef() : {/*@bgen(jjtree) mulExpressionDef */
  ASTmulExpressionDef jjtn000 = new ASTmulExpressionDef(JJTMULEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) mulExpressionDef */
     try {
/*@egen*/
     LOOKAHEAD(2 )<LRBRACKET>mulExpressionDef() <RRBRACKET>|
   unaryExpressionDef() [ (<MUL> | <DIV> | <MOD>) mulExpressionDef() ]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void addExpressionDef() : {/*@bgen(jjtree) addExpressionDef */
  ASTaddExpressionDef jjtn000 = new ASTaddExpressionDef(JJTADDEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) addExpressionDef */
    try {
/*@egen*/
    mulExpressionDef() [ (<ADD> | <SUB>) addExpressionDef() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void binaryBoolExpressionCompareDef() : {/*@bgen(jjtree) binaryBoolExpressionCompareDef */
  ASTbinaryBoolExpressionCompareDef jjtn000 = new ASTbinaryBoolExpressionCompareDef(JJTBINARYBOOLEXPRESSIONCOMPAREDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) binaryBoolExpressionCompareDef */
    try {
/*@egen*/
    addExpressionDef() [ binaryBoolOperatorCompareDef() binaryBoolExpressionCompareDef() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void binaryExpressionEqDef() : {/*@bgen(jjtree) binaryExpressionEqDef */
  ASTbinaryExpressionEqDef jjtn000 = new ASTbinaryExpressionEqDef(JJTBINARYEXPRESSIONEQDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) binaryExpressionEqDef */
    try {
/*@egen*/
    binaryBoolExpressionCompareDef() [ (<EQ> | <NEQ> ) binaryExpressionEqDef() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void binaryBoolExpressionAndDef() : {/*@bgen(jjtree) binaryBoolExpressionAndDef */
  ASTbinaryBoolExpressionAndDef jjtn000 = new ASTbinaryBoolExpressionAndDef(JJTBINARYBOOLEXPRESSIONANDDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) binaryBoolExpressionAndDef */
    try {
/*@egen*/
    binaryExpressionEqDef() [ <AND> binaryBoolExpressionAndDef() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void binaryBoolExpressionOrDef() : {/*@bgen(jjtree) binaryBoolExpressionOrDef */
  ASTbinaryBoolExpressionOrDef jjtn000 = new ASTbinaryBoolExpressionOrDef(JJTBINARYBOOLEXPRESSIONORDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) binaryBoolExpressionOrDef */
    try {
/*@egen*/
    binaryBoolExpressionAndDef() [ <OR> binaryBoolExpressionOrDef() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void binaryBoolOperatorCompareDef() : {/*@bgen(jjtree) binaryBoolOperatorCompareDef */
  ASTbinaryBoolOperatorCompareDef jjtn000 = new ASTbinaryBoolOperatorCompareDef(JJTBINARYBOOLOPERATORCOMPAREDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) binaryBoolOperatorCompareDef */
    try {
/*@egen*/
    
    <LT> | <LTE> | <GT> | <GTE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void boolExpressionDef() : {/*@bgen(jjtree) boolExpressionDef */
  ASTboolExpressionDef jjtn000 = new ASTboolExpressionDef(JJTBOOLEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) boolExpressionDef */
    try {
/*@egen*/
    <NOT>boolExpressionDef()   |
   
    LOOKAHEAD(2) <LRBRACKET>boolExpressionDef()<RRBRACKET>|
    binaryBoolExpressionOrDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void assignExpressionDef() : {/*@bgen(jjtree) assignExpressionDef */
  ASTassignExpressionDef jjtn000 = new ASTassignExpressionDef(JJTASSIGNEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) assignExpressionDef */
   try {
/*@egen*/
   idExpressionDef()<ASSIGN> expressionDef()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/    
}

void expressionDef() : {/*@bgen(jjtree) expressionDef */
  ASTexpressionDef jjtn000 = new ASTexpressionDef(JJTEXPRESSIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) expressionDef */
    try {
/*@egen*/
    LOOKAHEAD(2) assignExpressionDef() |   
    boolExpressionDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void varAssignDefInInit() : {/*@bgen(jjtree) varAssignDefInInit */
  ASTvarAssignDefInInit jjtn000 = new ASTvarAssignDefInInit(JJTVARASSIGNDEFININIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) varAssignDefInInit */
    try {
/*@egen*/
    <ASSIGN> expressionDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void listVarDefineDef() : {/*@bgen(jjtree) listVarDefineDef */
  ASTlistVarDefineDef jjtn000 = new ASTlistVarDefineDef(JJTLISTVARDEFINEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) listVarDefineDef */
    try {
/*@egen*/
    <TYPE> idExpressionDef() [varAssignDefInInit()]
    (<COMMA>idExpressionDef() [varAssignDefInInit()])*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void varDefineDef() : {/*@bgen(jjtree) varDefineDef */
  ASTvarDefineDef jjtn000 = new ASTvarDefineDef(JJTVARDEFINEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) varDefineDef */
    try {
/*@egen*/
    <TYPE> idExpressionDef() [varAssignDefInInit()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StatementBlockDef() : {/*@bgen(jjtree) StatementBlockDef */
  ASTStatementBlockDef jjtn000 = new ASTStatementBlockDef(JJTSTATEMENTBLOCKDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StatementBlockDef */
    try {
/*@egen*/
    <LCBRACKET> (StatementDef())* <RCBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void paramDef() : {/*@bgen(jjtree) paramDef */
  ASTparamDef jjtn000 = new ASTparamDef(JJTPARAMDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) paramDef */
     try {
/*@egen*/
     <TYPE> idExpressionDef()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void paramListDef() : {/*@bgen(jjtree) paramListDef */
  ASTparamListDef jjtn000 = new ASTparamListDef(JJTPARAMLISTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) paramListDef */
    try {
/*@egen*/
    paramDef() (<COMMA> paramDef())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void functionDef() : {/*@bgen(jjtree) functionDef */
  ASTfunctionDef jjtn000 = new ASTfunctionDef(JJTFUNCTIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) functionDef */
   try {
/*@egen*/
   <TYPE> <ID> <LRBRACKET> [paramListDef()] <RRBRACKET> StatementBlockDef()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

void sourceCodeDef() : {/*@bgen(jjtree) sourceCodeDef */
  ASTsourceCodeDef jjtn000 = new ASTsourceCodeDef(JJTSOURCECODEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) sourceCodeDef */
    try {
/*@egen*/   
    LOOKAHEAD( listVarDefineDef() <SEMICOLON> ) listVarDefineDef() <SEMICOLON> | functionDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (sourceCodeDef())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void constExpressionOrBinaryDef() : {/*@bgen(jjtree) constExpressionOrBinaryDef */
  ASTconstExpressionOrBinaryDef jjtn000 = new ASTconstExpressionOrBinaryDef(JJTCONSTEXPRESSIONORBINARYDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) constExpressionOrBinaryDef */
    try {
/*@egen*/
    constExpressionDef()                            |
    <NOT>     constExpressionOrBinaryDef()               | 
    <LRBRACKET>constExpressionOrBinaryDef() <RRBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/    
}

void ReturnStatementDef() : {/*@bgen(jjtree) ReturnStatementDef */
  ASTReturnStatementDef jjtn000 = new ASTReturnStatementDef(JJTRETURNSTATEMENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnStatementDef */
    try {
/*@egen*/
    <RETURN> [expressionDef()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void WhileStatementDef() : {/*@bgen(jjtree) WhileStatementDef */
  ASTWhileStatementDef jjtn000 = new ASTWhileStatementDef(JJTWHILESTATEMENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhileStatementDef */
    try {
/*@egen*/
    <WHILE> <LRBRACKET> expressionDef()
    <RRBRACKET> (StatementBlockDef() | StatementDef())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ForStatementDef() : {/*@bgen(jjtree) ForStatementDef */
  ASTForStatementDef jjtn000 = new ASTForStatementDef(JJTFORSTATEMENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForStatementDef */
    try {
/*@egen*/
    <FOR>  <LRBRACKET> (varDefineDef()|
    LOOKAHEAD(assignExpressionDef())assignExpressionDef()|
   idExpressionDef() )
    (<COMMA>(LOOKAHEAD(assignExpressionDef())assignExpressionDef()|idExpressionDef() ))* 
    <SEMICOLON>boolExpressionDef()
    <SEMICOLON>listExpressionDef() 
    <RRBRACKET> (StatementBlockDef() | StatementDef())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IfStatementDef() : {/*@bgen(jjtree) IfStatementDef */
  ASTIfStatementDef jjtn000 = new ASTIfStatementDef(JJTIFSTATEMENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfStatementDef */
    try {
/*@egen*/
    <IF> <LRBRACKET> expressionDef() <RRBRACKET> (StatementBlockDef() | StatementDef())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StatementDef() : {/*@bgen(jjtree) StatementDef */
  ASTStatementDef jjtn000 = new ASTStatementDef(JJTSTATEMENTDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StatementDef */
    try {
/*@egen*/
    listVarDefineDef()    <SEMICOLON>    |
    expressionDef()       <SEMICOLON>    |
    IfStatementDef()                     |
    ReturnStatementDef()  <SEMICOLON>    |
    ForStatementDef()                    |
    WhileStatementDef()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}